
	* Install the following packages (One time install only):
	ssc install palettes, replace
	ssc install colrspace, replace
	ssc install schemepack, replace
	
	
	* Making a folder on your desktop through Stata where we will store our
	* downloaded data for visualization
	capture mkdir "~/Desktop/vulnerability_climate"
	cd "~/Desktop/vulnerability_climate"
	
	
	* Downloading zip file from ND GAIN then unzipping within the working directory
	copy https://gain.nd.edu/assets/478975/resources.zip resources.zip
	unzipfile resources.zip, replace 
	
	
	* Importing vulnerability data
	import delimited "./resources/vulnerability/vulnerability.csv", varnames(1) colrange(1) clear
	rename (v*) vulnerability#, addnumber(1995)
	
	reshape long vulnerability, i(name) j(year)
	keep if year == 2020
	
	
	* Generating a centered variable for readiness
	quietly summarize vulnerability
	generate vul_cen = vulnerability - `r(mean)' if !missing(vulnerability)
	
	tempfile vul
	save `vul'
	
	
	*** Importing readiness data
	import delimited "./resources/readiness/readiness.csv", varnames(1) colrange(1) clear
	rename (v*) readiness#, addnumber(1995)
	
	reshape long readiness, i(name) j(year)
	keep if year == 2020
	
	
	* Generating a centered variable for readiness
	quietly summarize readiness
	generate readiness_cen = readiness - `r(mean)' if !missing(readiness)
	
	
	* Merging vulnerability data with readiness	
	merge 1:1 name using `vul', nogen
	
	
	* Ordering the centered variables to end of data
	order *_cen, last
	
	tempfile vul_read
	save `vul_read'
	
	
	*** Importing CO2 per capita data (Our world in data)
	import delimited "https://raw.githubusercontent.com/owid/co2-data/master/owid-co2-data.csv", varnames(1) clear
	keep if year == 2020
	
	rename iso_code iso3
	drop if missing(iso3)
	
	keep iso3 co2_per_capita
	
	
	* Merging CO2 per capita information with vulnerability and readiness
	* using the iso code for each country
	merge 1:1 iso3 using `vul_read', keep(matched) nogen
	
	* Dropping missing observations
	drop if missing(vulnerability)
	
	
	* Initial plot
	* twoway scatter readiness_std vul_std, xlabel(0) ylabel(0) xscale(off) yscale(off) msymbol(square) mfcolor(%30) mlcolor(white) scheme(white_tableau)
	
		
	* Quadrant colors (RGB CODES)
	* Quadrant 1: "24 160 204" (Top Right)
	* Quadrant 2: "199 28 25" (Bottom Right)
	* Quadrant 3: "244 142 1" (Bottom Left)
	* Quadrant 4: "9 219 165" (Top Left)
	* Light gray text: "174 174 174"

	
	generate colorname_cen = ""
	replace colorname_cen = "24 160 204" if vul_cen > 0 & readiness_cen > 0
	replace colorname_cen = "199 28 25" if vul_cen> 0 & readiness_cen <= 0
	replace colorname_cen = "244 142 1" if vul_cen<= 0 & readiness_cen <= 0
	replace colorname_cen = "9 219 165" if vul_cen<= 0 & readiness_cen > 0	
	
	
	* We then want to put certain countries on the bottom so that all others
	* appear above them and are able to display their white outlines while below
	* ones have black outline
	
	generate top = 0 if inlist(iso3, "SGP", "NOR", "USA", "CZE", "QAT", "BHR", "IND") | inlist(iso3, "TTO", "PAK")
	replace top = 1 if missing(top)
	
	sort top, stable
	
	
	* Manual label positions for countries
	generate x = .
	replace x = vul_cen + 0.01 if iso3 == "BHR"
	replace x = vul_cen - 0.003 if iso3 == "CZE"
	replace x = vul_cen + 0.015 if iso3 == "QAT"
	replace x = vul_cen if iso3 == "IND"
	replace x = vul_cen if iso3 == "PAK"
	replace x = vul_cen - 0.0125 if iso3 == "TTO"
	replace x = vul_cen + 0.005 if iso3 == "USA"
	replace x = vul_cen + 0.005 if iso3 == "SGP"
	replace x = vul_cen + 0.005 if iso3 == "NOR"
	
	* Generating variable for label position
	generate pos = 3 if top == 0
	replace pos = 9 if iso3 == "CZE"
	replace pos = 9 if iso3 == "TTO"
	
********************************************************************************
	
	* Plotting (Run all code from this point onwards in one go)
	* Saving the plotting code in a local 

	quietly summarize readiness_cen
	local ymax = `r(max)'
	
	quietly summarize vul_cen
	local xmax = `r(max)'
	
	* Using a loop to store each observation as a scatterplot 
	forvalues i = 1/`=_N' {
	
		local slist "`slist' (scatteri `=readiness_cen[`i']' `=vul_cen[`i']', ms(square) mlabposition(0) msize(`=co2_per_capita[`i']*0.25') mfcolor("`=colorname_cen[`i']'%60") mlcolor(white) mlwidth(*0.7) mlalign(outside))"
	
	}	
	
	* Using another loop to store specific countries as a scatterplot
	preserve
		drop if top == 1
		forvalues i = 1/`=_N' {
		
			* Creating black border for selected countries
			local slistt "`slistt' (scatteri `=readiness_cen[`i']' `=vul_cen[`i']', ms(square) mlabposition(0) msize(`=co2_per_capita[`i']*0.25') mfcolor("`=colorname_cen[`i']'%0") mlcolor(black) mlwidth(*1) mlalign(outside))"
			
			* Assigning country name to these black outlined markers
			local slistl "`slistl' (scatteri `=readiness_cen[`i']' `=x[`i']' "`=name[`i']'", ms(i) mlabposition(`=pos[`i']'))"
		
		}
		
	restore
	
	
	* Combining loops and creating the plot
	
	#delimit ;
	twoway 	`slist' `slistt' `slistl'  
			(scatteri 0.02 -0.21 "READINESS", ms(i) mlabpos(0) mlabsize(2) mlabcolor("174 174 174"))
			(pcarrowi 0.01 -0.235 0.075 -0.235, mcolor("174 174 174") lcolor("174 174 174"))
			(scatteri -0.37 -0.2 "VULNERABILITY", ms(i) mlabpos(0) mlabsize(2) mlabcolor("174 174 174"))
			(pcarrowi -0.37 -0.17 -0.37 -0.155, mcolor("174 174 174") lcolor("174 174 174"))
			,
			legend(off) 
			xlabel(0) 
			ylabel(0) 
			xscale(range(`=-`xmax'' `xmax') off) 
			yscale(range(`=-`ymax'' `=`ymax' + 0.1') off) 
			title("{bf}The countries with the highest vulnerability to climate change" "{bf}have the lowest CO2 emissions", pos(11) size(3)) 
			subtitle("All countries sorted by their {bf:vulnerability} to, and {bf:readiness} for, climate change. The {bf:size of each}" "{bf:square shows CO2 emissions} per person in that country", pos(11) size(2))
			note(`"{bf:Readiness} is defined in the ND-GAIN Index as the "readiness to make effective use of investments for adaptation actions thanks to a safe and efficient business environment.""' "{bf:CO2 emissions} are in metric tons per capita for the year 2020 - Created using Stata - Data Source:" "(1) Our World in Data" "(2) ND GAIN Index", size(1.6) color("100 100 100"))
			scheme(white_tableau) 
	;
	#delimit cr
	


	
	graph export "./co2_emissions_vulnerability_cen.png", as(png) width(3840) replace
